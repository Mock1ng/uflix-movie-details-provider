{"version":3,"sources":["loading.gif","components/contexts/MovieContext.js","components/Movie.js","components/Error.js","components/Form.js","components/Pagination.js","components/Greeting.js","components/Main.js","components/Navbar.js","components/DetailMovie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieContext","createContext","MovieProvider","children","useState","titleInput","setTitleInput","movies","setMovies","finishQuery","setFinishQuery","page","useRef","dataFound","setDataFound","pageJump","setPageJump","greetingOpen","setGreetingOpen","isLoading","setIsLoading","getMovies","title","a","fetch","res","json","data","Search","totalResults","Provider","value","Movie","poster","year","id","to","className","src","alt","Error","isOpen","message","ReactDOM","createPortal","style","width","height","background","position","top","left","transform","zIndex","display","justifyContent","alignItems","borderRadius","boxShadow","transition","fontWeight","color","document","querySelector","Form","useContext","inputRef","setIsOpen","onSubmit","e","preventDefault","current","blur","length","setTimeout","ref","type","placeholder","onChange","target","autoComplete","onClick","focus","Loading","Pagination","setMessage","Math","ceil","parseInt","name","Greeting","closeGreeting","Main","map","movie","key","imdbID","Title","Poster","Year","Navbar","DetailMovie","match","setMovie","ratings","setRatings","param","params","movieId","useEffect","getMovieById","Ratings","Type","imdbRating","imdbVotes","Rated","Runtime","Genre","Country","Released","Director","Writer","Actors","Language","Plot","Production","Website","Awards","rating","Source","Value","DVD","BoxOffice","App","basename","path","component","Boolean","window","location","hostname","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0ae9e7fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.3f259006.gif\";","import React, { createContext, useState, useRef } from 'react'\r\n\r\nexport const MovieContext = createContext();\r\n\r\nexport const MovieProvider = ({ children }) => {\r\n    const [titleInput, setTitleInput] = useState('');\r\n    const [movies, setMovies] = useState([]);\r\n    const [finishQuery, setFinishQuery] = useState('');\r\n    const page = useRef(1);\r\n    const [dataFound, setDataFound] = useState(0);\r\n    const [pageJump, setPageJump] = useState(1);\r\n    const [greetingOpen, setGreetingOpen] = useState(true);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const getMovies = async (title, page) => {\r\n        const res = await fetch(`http://www.omdbapi.com/?apikey=faf7e5bb&s=${title}&page=${page}`);\r\n        const data = await res.json();\r\n        setMovies(data.Search);\r\n        setDataFound(data.totalResults);\r\n        setIsLoading(false);\r\n    }\r\n\r\n    return (\r\n        <MovieContext.Provider value={{ titleInput, setTitleInput, movies, setMovies, getMovies, page, finishQuery, setFinishQuery, dataFound, pageJump, setPageJump, greetingOpen, setGreetingOpen, isLoading, setIsLoading }}>\r\n            {children}\r\n        </MovieContext.Provider>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Movie = ({ poster, title, year, id }) => {\r\n    return (\r\n        <NavLink to={'/detail/movieId=' + id} className='movie'>\r\n            <div className=\"poster-container\">\r\n                <img src={poster} alt={title + '\\'s Poster'} />\r\n            </div>\r\n            <div className=\"card-attributes\">\r\n                <h4 className='attr-title'>{title}</h4>\r\n                <p className='attr-year'>{year}</p>\r\n            </div>\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default Movie\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst Error = ({ isOpen, message }) => {\r\n    const modalStyles = {\r\n        width: '300px',\r\n        height: '40px',\r\n        background: '#eee',\r\n        position: 'fixed',\r\n        top: '50px',\r\n        left: '50%',\r\n        transform: 'translateX(-50%)',\r\n        zIndex: '9999',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        borderRadius: '5px',\r\n        boxShadow: '2px 3px 10px 2px hsl(209, 23%, 22%)',\r\n        transition: '0.2s all ease',\r\n        fontWeight: 600\r\n    }\r\n    if (isOpen) {\r\n        return ReactDOM.createPortal(\r\n            <div style={modalStyles}>\r\n                <p style={{ color: '#333' }}>{message}</p>\r\n            </div>, document.querySelector('#popup')\r\n        )\r\n    } else {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport default Error;\r\n","import React, { useContext, useRef, useState } from 'react';\r\nimport { MovieContext } from './contexts/MovieContext';\r\nimport Error from './Error';\r\nimport Loading from '../loading.gif';\r\n\r\nconst Form = () => {\r\n    const { titleInput, setTitleInput, setFinishQuery, page, getMovies, setPageJump, isLoading, setIsLoading } = useContext(MovieContext);\r\n    const inputRef = useRef();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const titleInputHandler = e => setTitleInput(e.target.value);\r\n\r\n    const removeQuery = () => {\r\n        setTitleInput('');\r\n        inputRef.current.focus();\r\n    }\r\n\r\n    const submit = e => {\r\n        e.preventDefault();\r\n        setIsLoading(true);\r\n        inputRef.current.blur();\r\n        if (titleInput.length > 0) {\r\n            page.current = 1;\r\n            setPageJump(1);\r\n            setFinishQuery(titleInput);\r\n            getMovies(titleInput, page.current);\r\n        } else {\r\n            setIsOpen(true);\r\n            setTimeout(() => setIsOpen(false), 3000)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={submit} className='form-title'>\r\n                <section className='search-container'>\r\n                    <i className=\"fas fa-search\"></i>\r\n                    <input ref={inputRef} type=\"text\" id='movie-title' placeholder='Try search \"Avengers\"...' value={titleInput} onChange={titleInputHandler} autoComplete='off' />\r\n                    <i onClick={removeQuery} className=\"fas fa-times remove-query\"></i>\r\n                </section>\r\n\r\n                {isLoading ? <img src={Loading} alt=\"loading gif\" className='loading-gif' /> : ''}\r\n\r\n            </form>\r\n\r\n            <Error isOpen={isOpen} message='Title input must be filled!' />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React, { useContext, useState } from 'react'\r\nimport { MovieContext } from './contexts/MovieContext';\r\nimport Error from './Error';\r\n\r\nconst Pagination = () => {\r\n    const { getMovies, page, finishQuery, pageJump, setPageJump, dataFound, setIsLoading } = useContext(MovieContext);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n\r\n    const nextPage = () => {\r\n        if (page.current === Math.ceil(dataFound / 10) || dataFound === 0) {\r\n            setIsOpen(true);\r\n            setMessage('Page didn\\'t exist!');\r\n            setTimeout(() => setIsOpen(false), 3000);\r\n        } else {\r\n            setIsLoading(true);\r\n            page.current += 1;\r\n            setPageJump(page.current);\r\n            getMovies(finishQuery, page.current);\r\n        }\r\n    }\r\n\r\n    const prevPage = () => {\r\n        if (page.current === 1) {\r\n            setIsOpen(true);\r\n            setMessage('This is the first page!');\r\n            setTimeout(() => setIsOpen(false), 3000);\r\n        } else {\r\n            setIsLoading(true);\r\n            page.current -= 1;\r\n            setPageJump(page.current);\r\n            getMovies(finishQuery, page.current);\r\n        }\r\n    }\r\n\r\n    const pageToJumpHandler = e => setPageJump(e.target.value);\r\n\r\n    const jumpPage = e => {\r\n        e.preventDefault();\r\n        if (pageJump > Math.ceil(dataFound / 10)) {\r\n            setIsOpen(true);\r\n            setMessage(`There are only ${Math.ceil(dataFound / 10)} pages!`)\r\n            setTimeout(() => setIsOpen(false), 3000);\r\n        } else {\r\n            setIsLoading(true);\r\n            page.current = parseInt(pageJump);\r\n            getMovies(finishQuery, pageJump);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"pagination\">\r\n            <Error />\r\n            <div className='pagination-wrapper'>\r\n                <p>Page: </p>\r\n                <button className='btn prev-btn' onClick={prevPage}><i className=\"fas fa-angle-left\"></i></button>\r\n                <p className=\"current-page\">{page.current}</p>\r\n                <button className='btn next-btn' onClick={nextPage}><i className=\"fas fa-angle-right\"></i></button>\r\n            </div>\r\n\r\n            <Error isOpen={isOpen} message={message} />\r\n\r\n            <div className=\"jump-page\">\r\n                <p>Jump to page: </p>\r\n\r\n                <form onSubmit={jumpPage}>\r\n                    <input type=\"number\" name=\"jump-page\" id=\"jump-page\" value={pageJump} onChange={pageToJumpHandler} />\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { useContext } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { MovieContext } from './contexts/MovieContext';\r\n\r\nconst Greeting = () => {\r\n    const { greetingOpen, setGreetingOpen } = useContext(MovieContext);\r\n\r\n    const closeGreeting = () => setGreetingOpen(false);\r\n\r\n    if (greetingOpen) {\r\n        return (\r\n            ReactDOM.createPortal(\r\n                (<div className=\"greeting\" onClick={closeGreeting}>\r\n                    <div className=\"greeting-message\">\r\n                        <h2>Welcome to uFlix!</h2>\r\n                        <p>Since this is your first time using our app, try to search movie's title at input field on your left upper corner.</p>\r\n                        <button className='got-it' onClick={closeGreeting}>Got it</button>\r\n                    </div>\r\n                </div>), document.querySelector('#popup')\r\n            )\r\n        )\r\n    } else {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport default Greeting;\r\n","import React, { useContext } from 'react';\r\nimport { MovieContext } from './contexts/MovieContext';\r\nimport Movie from './Movie';\r\nimport Form from './Form';\r\nimport Pagination from './Pagination';\r\nimport Greeting from './Greeting';\r\n\r\nconst Main = () => {\r\n    const { movies, dataFound } = useContext(MovieContext);\r\n\r\n    return (\r\n        <div>\r\n            <Form />\r\n\r\n            {dataFound > 0 ? (<p className='data-found'>Found {dataFound} item(s)</p>) : ''}\r\n\r\n            {dataFound > 0 ? <Pagination /> : ''}\r\n\r\n            <div className=\"movie-wrapper\">\r\n                {movies ?\r\n                    movies.map(movie => (\r\n                        <Movie key={movie.imdbID} id={movie.imdbID} title={movie.Title} poster={movie.Poster} year={movie.Year} />\r\n                    ))\r\n                    : (<p>Seems.. like.. something went wrong :(</p>)\r\n                }\r\n            </div>\r\n\r\n            <Greeting />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav>\r\n            <div className=\"logo\">uFlix</div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DetailMovie = ({ match }) => {\r\n    const [movie, setMovie] = useState({});\r\n    const [ratings, setRatings] = useState([]);\r\n    const param = match.params.movieId;\r\n\r\n    useEffect(() => {\r\n        getMovieById(param);\r\n    }, [param]);\r\n\r\n    const getMovieById = async id => {\r\n        const res = await fetch(`http://www.omdbapi.com/?apikey=faf7e5bb&i=${id}&plot=full`);\r\n        const data = await res.json();\r\n        setMovie(data);\r\n        setRatings(data.Ratings);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NavLink className='back-btn' to='/'>Back</NavLink>\r\n\r\n            <div className=\"movie-detail-wrapper\">\r\n                <div className=\"img-wrapper\">\r\n                    <img src={movie.Poster} alt=\"\" />\r\n                </div>\r\n                <div className=\"movie-details\">\r\n                    <div className=\"head-movie\">\r\n                        <div className=\"head-title\">\r\n                            <h4>{movie.Title} <span>({movie.Type}, {movie.Year})</span></h4>\r\n                            <div className=\"imdb-ratings\">\r\n                                <p>IMDb: <span>{movie.imdbRating}</span> <i className=\"fas fa-star\"></i></p>\r\n                                <p className='vote'>Votes: <span>{movie.imdbVotes}</span> <i className=\"fas fa-thumbs-up\"></i></p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"head-details\">\r\n                            <p><span>{movie.Rated}</span> <span>{movie.Runtime}utes</span> <span>{movie.Genre}</span> <span>{movie.Country}, {movie.Released}</span></p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"movie-attrs\">\r\n                        <div className='first-attrs'>\r\n                            <p className=\"attr\">Director(s): <span>{movie.Director}</span></p>\r\n                            <p className=\"attr\">Writer(s): <span>{movie.Writer}</span></p>\r\n                            <p className=\"attr\">Casts: <span>{movie.Actors}</span></p>\r\n                            <p className=\"attr\">Language(s): <span>{movie.Language}</span></p>\r\n                            <div className=\"plot\">\r\n                                <h6>Synopsis:</h6>\r\n                                <p>{movie.Plot}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className='second-attrs'>\r\n                            <p className=\"attr\">Production: <span>{movie.Production}</span></p>\r\n                            <p className='attr'>Website: <span>{movie.Website}</span></p>\r\n                            <p className=\"attr\">Award(s): <span>{movie.Awards}</span></p>\r\n                            <div className=\"movie-ratings\">\r\n                                <h5 className=\"rating\">Rating(s):</h5>\r\n                                {ratings.map(rating => (\r\n                                    <p key={rating.Source}>{rating.Source}: <span>{rating.Value}</span></p>\r\n                                ))}\r\n                            </div>\r\n                            <p className=\"attr\">DVD Release: <span>{movie.DVD}</span></p>\r\n                            <p className=\"attr\">Box Office: <span>{movie.BoxOffice}</span></p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailMovie\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { MovieProvider } from './components/contexts/MovieContext';\nimport Main from './components/Main';\nimport Navbar from './components/Navbar';\nimport DetailMovie from './components/DetailMovie';\nimport './styles/index.scss';\n\nfunction App() {\n  return (\n    <>\n      <MovieProvider>\n        <Navbar />\n        <div className='container'>\n          <Router basename='/'>\n            <Switch>\n              <Route path='/' component={Main} />\n              <Route path='/detail/movieId=:movieId' component={DetailMovie} />\n            </Switch>\n          </Router>\n        </div>\n      </MovieProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}